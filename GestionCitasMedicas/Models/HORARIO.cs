//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GestionCitasMedicas.Models
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel.DataAnnotations;

    public partial class HORARIO: IValidatableObject
    {
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")]
        public HORARIO()
        {
            this.CITAS = new HashSet<CITAS>();
        }
    
        public int id_horario { get; set; }
        [Required]
        [DataType(DataType.Date)]
        [Display(Name = "Fecha")]
        public Nullable<System.DateTime> fecha { get; set; }
        [Required]
        [Display(Name = "Hora Inicio")]
        [DataType(DataType.Time)]
        [DisplayFormat(DataFormatString = "{0:hh\\:mm}", ApplyFormatInEditMode = true)]
        public Nullable<System.TimeSpan> horaInicio { get; set; }
       // [Required]
       // [Display(Name = "Hora Final")]
       // [DataType(DataType.Time)]
       // [DisplayFormat(DataFormatString = "{0:hh\\:mm}", ApplyFormatInEditMode = true)]
        public Nullable<System.TimeSpan> horaFinal { get; set; }
        public Nullable<int> id_doctor { get; set; }
        public string disponibilidad { get; set; }
    
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<CITAS> CITAS { get; set; }
        public virtual DOCTOR DOCTOR { get; set; }


        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        {
            var errores = new List<ValidationResult>();
            // if either date is null, that date's required attribute will invalidate
          //  if (horaInicio != null && horaFinal != null && horaInicio >= horaFinal)
          //  {
                
                //    yield return new ValidationResult("EndDate is not greater than StartDate.");
          //      errores.Add(new ValidationResult("La hora Final debe ser mayor a la hora de Inicio", new string[] { "horaFinal" }));
         //   }

            if (fecha < DateTime.Today)
            {
                errores.Add(new ValidationResult("La reserva no puede realizarse en el pasado! 😁", new string[] { "fecha" }));
            }

            return errores;

        }
        public override string ToString()
        {
            return " " + horaInicio + " " + horaFinal;
        }


    }
}
